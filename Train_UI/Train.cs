using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Train_UI
{
    //parent classes representing trains running in the system
    public class Train
    {
        protected int profitGenerated;  //amount of profit generated by a train (in dollars)
        protected string trainID;
        protected int speed;
        protected int distanceTravelled;
        protected Crew currentCrew;
        protected Hub originHub;
        protected Track currentTrack;  //when its on a track, this field is updated
        protected Vertex currentLocation;  //where in the graph is the train
        public bool IsPassengerTrain { get; set; }
        public bool IsFreightTrain { get; set; }

        //INCOMPLETE
        //public Hub ChangeOriginHub(Hub newHub)
        //{
        //    originHub = newHub;
        //    return originHub;
        //}

        //THIS WILL BE COMPLETED LATER
        //public Crew ChangeCrew()
        //{
            
        //}

    }



    //This class represents a passenger train that transport people to passenger stations
    public class PassengerTrain : Train
    {
        private PassengerStation currentDockedStation; //station that train is currently at
        private int numPassengers;  //passengers currently on train
        private int totalPassengers;  //total passengers that entered train in a given time frame

        //Description: Constructor method
        //Pre-Condition: None
        //Post-Condition: Generates passenger train object 
        public PassengerTrain(string trainID, int speed)
        {
            this.trainID = trainID;
            numPassengers = 0;
            totalPassengers = 0;
            currentDockedStation = null;
            profitGenerated = 0;
            IsPassengerTrain = true;
            IsFreightTrain = false;
            this.speed = speed;
            distanceTravelled = 0;
        }

        //Description: Adds profit based on number people that just boarded train from a station
        //Pre-Condition: None
        //Post-Condition: Profit field is updated
        public PassengerStation GetCurrentDockedStation()
        {
            return currentDockedStation;
        }

        //Description: Adds profit based on number people that just boarded train from a station
        //Pre-Condition: None
        //Post-Condition: Profit field is updated
        private void GenerateProfit(int numPeople, int ticketPrice)
        {
            profitGenerated += numPeople * ticketPrice;  //number of people boarding train times the ticketPrice for that train
        }

        //Description: Gets the profit generated (in dollars) by a train during a given period of time
        //Pre-Condition: None
        //Post-Condition: Profit field is returned
        public int GetProfitGenerated()
        {
            return profitGenerated;
        }

        //Description: Adds people from station to train
        //Pre-Condition: None
        //Post-Condition: Train gets more people, fields updated
        public void AddPassengers()
        {
            int numPeople = currentDockedStation.AddPeopleOnTrain();  //station has to add people on train
            numPassengers += numPeople;   //updating fields
            totalPassengers += numPeople;

            GenerateProfit(numPeople, currentDockedStation.GetTicketPrice());  //more people coming on means more profit
        }

        //Description: Remvoes people from train onto station
        //Pre-Condition: None
        //Post-Condition: Passenger field is decreased
        public void SubtractPassengers()
        {
            int numPeople = currentDockedStation.SubPeopleOffTrain(this);  //station has to remove people from train
            numPassengers -= numPeople;
        }

        //Description: Get number of passengers on a train
        //Pre-Condition: None
        //Post-Condition: Returns number of passengers
        public int GetNumPassengers()
        {
            return numPassengers;
        }

        //Description: Get total passengers that have traveled on a train in a given time frame
        //Pre-Condition: None
        //Post-Condition: Returns total passenger number
        public int GetTotalPassengers()
        {
            return totalPassengers;
        }

        //Description: Resets the trains object's fields
        //Pre-Condition: None
        //Post-Condition: All fields set to 0 (or its type equivalent)
        public void ClearFields()
        {
            currentDockedStation = null;
            numPassengers = 0;
            totalPassengers = 0;
            profitGenerated = 0;
        }
    }

    public class FreightTrain : Train
    {
        private FreightStation currentlyDockedStation;  //which freight station its currently visiting
        private int amountOfCargoDelivered;  //for a given time period
        private const int PROFIT_PER_TON = 10000;  //$10,000 arbitrary unit per ton of cargo 

        //Description: Constructor method 
        //Pre-Condition: None
        //Post-Condition: New object made with fields initialized
        FreightTrain()
        {
            currentlyDockedStation = null;
            amountOfCargoDelivered = 0;
            profitGenerated = 0;
            IsPassengerTrain = false;
            IsFreightTrain = true;
        }

        //Description: Train unloads cargo at current freight station on its route
        //Pre-Condition: None
        //Post-Condition: profit generated field and amount delivered fields are updated
        public void UnloadCargo(int amount)
        {
            currentlyDockedStation.UnloadCargo(amount);
            amountOfCargoDelivered += amount;
            GenerateProfit(amount);
        }

        //Description: Train generates profit based of fixed rate per ton of cargo delivered 
        //Pre-Condition: None
        //Post-Condition: Profit generated field is updated
        private void GenerateProfit(int amount)
        {
            profitGenerated += PROFIT_PER_TON * amount;
        }

        //Description: Gets the total profit generated by the freight train
        //Pre-Condition: None
        //Post-Condition: Returns profit generated field
        public int GetProfitGenerated()
        {
            return profitGenerated;
        }

        //Description: Gets the amount of cargo, in tons, delviered by a freight train
        //Pre-Condition: None
        //Post-Condition: Returns amount of cargo delivered field
        public int GetAmountOfCargoDelivered()
        {
            return amountOfCargoDelivered;
        }
    }

}
